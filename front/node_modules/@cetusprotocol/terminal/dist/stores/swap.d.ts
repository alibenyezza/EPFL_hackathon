import { SwapRouterData, Token } from '../types/common';
interface SwapState {
    defaultFromCoinType?: string;
    defaultToCoinCoinType?: string;
    setDefaultCoin: (from?: string, to?: string) => void;
    fromCoin: Token | undefined;
    toCoin: Token | undefined;
    setFromCoin: (value: Token | undefined) => void;
    setToCoin: (value: Token | undefined) => void;
    byAmountIn: boolean;
    setByAmountIn: (byAmountIn: boolean) => void;
    fromAmount: string;
    toAmount: string;
    setFromAmount: (amount: string) => void;
    setToAmount: (amount: string) => void;
    findRouterLoading: boolean;
    setFindRouterLoading: (loading: boolean) => void;
    routerData?: SwapRouterData;
    setRouterData: (data?: SwapRouterData) => void;
    isOpenSecondary: boolean;
    setIsOpenSecondary: (isOpen: boolean) => void;
    isOpenTokensDialog: boolean;
    setIsOpenTokensDialog: (isOpen: boolean) => void;
}
declare const useSwapStore: import('zustand').UseBoundStore<import('zustand').StoreApi<SwapState>>;
export default useSwapStore;
