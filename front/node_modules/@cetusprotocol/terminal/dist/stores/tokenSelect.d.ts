import { Token } from '../types';
interface AccountState {
    currentTypeTab: string;
    setCurrentTypeTab: (value: string) => void;
    currentPlatformTab: string;
    setCurrentPlatformTab: (value: string) => void;
    platformList: string[];
    setPlatformList: (value: string[]) => void;
    isOpenImportDialog: boolean;
    setIsOpenImportDialog: (value: boolean) => void;
    collectTokenMap: Map<string, Token>;
    setCollectTokenMap: (data: Map<string, Token>, notSave?: boolean) => void;
    showTokenList: any[];
    setShowTokenList: (data: any[]) => void;
    combineTokenList: any[];
    setComBineTokenList: (data: any[]) => void;
    currentImportTokenData: any;
    setCurrentImportTokenData: (data: any) => void;
    importTokenList: Token[];
    setImportToken: (token: Token, isAdd: boolean) => Token[];
    setImportTokenList: (tokenList: Token[]) => void;
    importTokenIsLoading: boolean;
    setImportTokenIsLoading: (value: boolean) => void;
    searchInput: string;
    setSearchInput: (value: string) => void;
    showTokenListIsLoading: boolean;
    setShowTokenListIsLoading: (value: boolean) => void;
}
declare const useTokenSelectStore: import('zustand').UseBoundStore<import('zustand').StoreApi<AccountState>>;
export { useTokenSelectStore };
