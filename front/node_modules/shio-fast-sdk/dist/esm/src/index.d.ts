import { Transaction, TransactionArgument, TransactionDataBuilder, BuildTransactionOptions } from '@mysten/sui/transactions';
import { SignatureWithBytes } from '@mysten/sui/cryptography';
import { SuiClient, SuiTransactionBlockResponseOptions } from '@mysten/sui/client';
interface EstimatedFee {
    gasPrice: number;
    gasBudget: number;
    tipAmount: number;
}
export declare const ShioFastRpcUrl = "https://rpc.getshio.com/fast";
export declare const ShioPackageId = "0x1889977f0fb56ae730e7bda8e8e32859ce78874458c74910d36121a81a615123";
export declare const ShioGlobalStateObjects: {
    objectId: string;
    version: number;
}[];
export interface EstimateFeeOptions {
    sender?: string;
    transaction: Transaction;
    client: SuiClient;
}
export declare function EstimateFee(options: EstimateFeeOptions): Promise<EstimatedFee>;
export declare function PickShioGlobalStateObject(): {
    objectId: string;
    version: number;
};
export declare function FastGasFeePlugin(transactionData: TransactionDataBuilder, options: BuildTransactionOptions, next: () => Promise<void>): Promise<void>;
export declare function ExecuteTransactionBlock(client: SuiClient, txAndSig: SignatureWithBytes, options?: SuiTransactionBlockResponseOptions): Promise<import("@mysten/sui/client").SuiTransactionBlockResponse>;
export declare function ExecuteBundle(client: SuiClient, txAndSig: SignatureWithBytes[]): Promise<boolean>;
export declare function AppendCoinToTip(tx: Transaction, coin: TransactionArgument, tipAmount: number): Promise<void>;
export declare function AppendBalanceToTip(tx: Transaction, balance: TransactionArgument, tipAmount: number): Promise<void>;
export {};
