"use strict";
// Fichier: src/core/keeper.ts
// Keeper classique avec strat√©gie adaptative
Object.defineProperty(exports, "__esModule", { value: true });
exports.runKeeperLoop = runKeeperLoop;
const sui_1 = require("../utils/sui");
const constants_1 = require("../utils/constants");
const strategy_1 = require("./strategy");
const rebalancePosition_1 = require("../actions/rebalancePosition");
async function runKeeperLoop() {
    const positionId = process.env.POSITION_ID;
    if (!positionId) {
        console.error("‚ùå ERREUR : POSITION_ID n'est pas d√©fini dans .env.");
        console.error("üí° Ex√©cutez 'npm run create-position' d'abord pour cr√©er une position.");
        return;
    }
    console.log(`\n--- üîÑ V√©rification √† ${new Date().toLocaleTimeString()} ---`);
    console.log(`üèä Pool: ${constants_1.POOL_ID}`);
    console.log(`üìç Position: ${positionId}`);
    try {
        // 1. R√©cup√©rer les informations du pool et de la position
        console.log('üìä R√©cup√©ration des donn√©es...');
        const [pool] = await Promise.all([
            sui_1.cetusSdk.Pool.getPool(constants_1.POOL_ID)
        ]);
        // R√©cup√©rer la position depuis Sui client
        const positionObject = await sui_1.suiClient.getObject({
            id: positionId,
            options: { showContent: true }
        });
        if (!pool || !positionObject.data) {
            throw new Error("Impossible de r√©cup√©rer les infos du pool ou de la position.");
        }
        const position = positionObject.data.content;
        console.log(`üí∞ Liquidit√© actuelle: ${position.fields?.liquidity_amount_a || 'N/A'}`);
        console.log(`üìà Prix actuel (tick): ${pool.current_tick_index}`);
        // 2. Analyser si un r√©√©quilibrage est n√©cessaire
        const newTicks = (0, strategy_1.checkAdaptiveStrategy)(pool, position);
        if (newTicks) {
            console.log('üöÄ D√©clenchement du r√©√©quilibrage...');
            await (0, rebalancePosition_1.rebalancePosition)(positionId, newTicks.tick_lower, newTicks.tick_upper);
        }
        else {
            console.log('üòå Position stable, pas d\'action n√©cessaire.');
        }
    }
    catch (error) {
        console.error('‚ùå Erreur dans la boucle du keeper:', error);
    }
}
